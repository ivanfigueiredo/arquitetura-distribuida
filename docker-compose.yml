version: "3.8"

services:
  kong:
    image: kong:latest
    container_name: kong
    networks:
      - expense
    restart: always
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong/declarative/kong.yml
      KONG_LOG_LEVEL: debug
      KONG_TRACING_INSTRUMENTATIONS: all
      KONG_TRACING_SAMPLING_RATE: 1.0
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      # KONG_ADMIN_GUI_URL: http://localhost:8002

    depends_on:
      - bus
      - opentelemetry-collector

    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 120s
      timeout: 10s
      retries: 3
    volumes:
      - ./kong/kong.yml:/kong/declarative/kong.yml
      - ./logs/kong:/var/log/kong
    ports:
      - "8004:8000"
      - "8443:8443"
      # - "8002:8002"
      - "8001:8001"
      - "8444:8444"

  opentelemetry-collector:
    container_name: opentelemetry-collector
    restart: always
    depends_on:
      - tempo
    image: otel/opentelemetry-collector-contrib
    ports:
      - "1888:1888"
      - "8888:8888"
      - "8889:8889"
      - "13133:13133"
      - "55679:55679"
    volumes:
      - ./volumes/otel/otelcol.yaml:/etc/otel-collector-config.yaml
      - ./logs/kong:/var/log/kong
    command: --config=/etc/otel-collector-config.yaml
    networks:
      - expense

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - tempo
    volumes:
      - ./volumes/grafana/grafana.yml:/etc/grafana/provisioning/datasources/datasources.yml
    networks:
      - expense

  prometheus:
    container_name: prometheus
    image: prom/prometheus
    restart: always
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./volumes/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - expense

  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    ports:
      - "3200:3200" # HTTP API
      - "4318:4318" # otlp http
    volumes:
      - tempo-data:/var/lib/tempo
      - ./volumes/tempo/tempo-local.yml:/etc/tempo/tempo-local.yml
    networks:
      - expense
    command:
      - --config.file=/etc/tempo/tempo-local.yml

  loki:
    image: grafana/loki:latest
    command: -config.file=/etc/loki/local-config.yaml
    container_name: loki
    ports:
      - "3100:3100"
    networks:
      - expense

  queue:
    container_name: rabbitMQ
    image: rabbitmq:3-management
    hostname: my-rabbit
    volumes:
      - ./volumes/rabbitmq-data:/var/lib/rabbitmq/mnesia/rabbit@my-rabbit
    environment:
      RABBITMQ_ERLANG_COOKIE: "SWQOKODSQALRPCLNMEQG"
      RABBITMQ_DEFAULT_USER: "rabbitmq"
      RABBITMQ_DEFAULT_PASS: "rabbitmq"
      RABBITMQ_DEFAULT_VHOST: "/"
    ports:
      - "15672:15672"
      - "5672:5672"
    networks:
      - expense

  create_user:
    container_name: user_create
    restart: always
    build:
      context: ./ExpenseCore
      dockerfile: Dockerfile_user
    networks:
      - expense
      - user
    depends_on:
      - queue
      - user_db
      - opentelemetry-collector
      - flyway_db_user

  # confirmation_email:
  #   container_name: confirmation_email
  #   restart: always
  #   build:
  #     context: ./ExpenseCore
  #     dockerfile: Dockerfile_confirmation_email
  #   networks:
  #     - expense
  #     - user
  #   depends_on:
  #     - user_db
  #     - opentelemetry-collector
  #     - flyway_db_user

  # client_registration:
  #   container_name: client_registration
  #   restart: always
  #   build:
  #     context: ./ExpenseCore
  #     dockerfile: Dockerfile_client_registration
  #   networks:
  #     - expense
  #     - client
  #   depends_on:
  #     - queue
  #     - client_db
  #     - opentelemetry-collector
  #     - flyway_db_client

  auth:
    build:
      context: ./ExpenseCore
      dockerfile: Dockerfile_auth
    container_name: auth
    restart: always
    environment:
      KEY: "a2f6f906-a3d6-4a4e-bcaf-25e133151600"
      SECRET_KEY: "fb0557e8-a202-495c-9eda-94fa65c33070"
    networks:
      - expense
      - user
    depends_on:
      - user_db
      - opentelemetry-collector
      - flyway_db_user

  bus:
    container_name: bus_app
    restart: always
    build:
      context: ./ExpenseMaster
      dockerfile: Dockerfile
    networks:
      - expense
    depends_on:
      - queue
      - opentelemetry-collector

  maildispatcher:
    container_name: maildispatcher
    restart: always
    build:
      context: ./MailDispatcher
      dockerfile: Dockerfile
    networks:
      - expense
    depends_on:
      - queue
      - opentelemetry-collector

  # flyway_db_client:
  #   image: flyway/flyway
  #   container_name: flyway_db_client
  #   volumes:
  #     - ./volumes/flyway/client_db:/flyway/sql
  #   command: -url=jdbc:postgresql://client_db:5432/client_database -user=postgres_client -password=postgres_client migrate
  #   depends_on:
  #     - client_db
  #   networks:
  #     - client

  # client_db:
  #   image: postgres:latest
  #   container_name: client_db
  #   environment:
  #     POSTGRES_USER: postgres_client
  #     POSTGRES_PASSWORD: postgres_client
  #     POSTGRES_DB: client_database
  #   networks:
  #     - client
  #   ports:
  #     - 5432:5432

  # flyway_db_account:
  #   image: flyway/flyway
  #   container_name: flyway_db_account
  #   volumes:
  #     - ./volumes/flyway/account_db:/flyway/sql
  #   command: -url=jdbc:postgresql://account_db:5432/account_database -user=postgres_account -password=postgres_account migrate
  #   depends_on:
  #     - account_db
  #   networks:
  #     - account

  # account_db:
  #   image: postgres:latest
  #   container_name: account_db
  #   environment:
  #     POSTGRES_USER: postgres_account
  #     POSTGRES_PASSWORD: postgres_account
  #     POSTGRES_DB: account_database
  #   networks:
  #     - account
  #   ports:
  #     - 5433:5432

  flyway_db_user:
    image: flyway/flyway
    container_name: flyway_db_user
    volumes:
      - ./volumes/flyway/user_db:/flyway/sql
    command: -url=jdbc:postgresql://user_db:5432/user_database -user=postgres_user -password=postgres_user migrate
    depends_on:
      - user_db
    networks:
      - user

  user_db:
    image: postgres:latest
    container_name: user_db
    environment:
      POSTGRES_USER: postgres_user
      POSTGRES_PASSWORD: postgres_user
      POSTGRES_DB: user_database
    networks:
      - user
    ports:
      - 5434:5432

volumes:
  grafana-data:
  rabbitmq-data:
  tempo-data:

networks:
  user:
    driver: bridge
  account:
    driver: bridge
  expense:
    driver: bridge
  client:
    driver: bridge
